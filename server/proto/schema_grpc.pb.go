// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: schema.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Digimon_Create_FullMethodName = "/Digimon/Create"
	Digimon_Query_FullMethodName  = "/Digimon/Query"
	Digimon_Foster_FullMethodName = "/Digimon/Foster"
)

// DigimonClient is the client API for Digimon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DigimonClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Foster(ctx context.Context, in *FosterRequest, opts ...grpc.CallOption) (*FosterResponse, error)
}

type digimonClient struct {
	cc grpc.ClientConnInterface
}

func NewDigimonClient(cc grpc.ClientConnInterface) DigimonClient {
	return &digimonClient{cc}
}

func (c *digimonClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, Digimon_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digimonClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, Digimon_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *digimonClient) Foster(ctx context.Context, in *FosterRequest, opts ...grpc.CallOption) (*FosterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FosterResponse)
	err := c.cc.Invoke(ctx, Digimon_Foster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DigimonServer is the server API for Digimon service.
// All implementations must embed UnimplementedDigimonServer
// for forward compatibility.
type DigimonServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Foster(context.Context, *FosterRequest) (*FosterResponse, error)
	mustEmbedUnimplementedDigimonServer()
}

// UnimplementedDigimonServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDigimonServer struct{}

func (UnimplementedDigimonServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDigimonServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDigimonServer) Foster(context.Context, *FosterRequest) (*FosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Foster not implemented")
}
func (UnimplementedDigimonServer) mustEmbedUnimplementedDigimonServer() {}
func (UnimplementedDigimonServer) testEmbeddedByValue()                 {}

// UnsafeDigimonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DigimonServer will
// result in compilation errors.
type UnsafeDigimonServer interface {
	mustEmbedUnimplementedDigimonServer()
}

func RegisterDigimonServer(s grpc.ServiceRegistrar, srv DigimonServer) {
	// If the following call pancis, it indicates UnimplementedDigimonServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Digimon_ServiceDesc, srv)
}

func _Digimon_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigimonServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Digimon_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigimonServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Digimon_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigimonServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Digimon_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigimonServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Digimon_Foster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DigimonServer).Foster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Digimon_Foster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DigimonServer).Foster(ctx, req.(*FosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Digimon_ServiceDesc is the grpc.ServiceDesc for Digimon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Digimon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Digimon",
	HandlerType: (*DigimonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Digimon_Create_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Digimon_Query_Handler,
		},
		{
			MethodName: "Foster",
			Handler:    _Digimon_Foster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
